*  XPiratez Research Tree Explorer (aka xresearch)
`xresearch` is a web-based application meant to allow exploration of the XPiratez research tree data.

This web application is released into the public domain with no license, copyright or warranty claims made. Dependent libraries carry their own licenses as part of their source (or implied by the license available at their repository/website-of-record).

For better or worse, this app was developed and tested in Chrome, so use that if you want it to run w/ relatively little hassle.

This application was conceived-of and developed-by Jeffery Olson for the sake of exploring the data and as an opportunity to develop with tools like React, cytoscape.js, etc. Also, `xresearch` has a somewhat unorthodox application structure, owing to my still-evolving grasp of assorted haute webdev tools/pipelines (and trying to manage the cognitive load thereof). So it's not structured according to what's observed as best practice. Please do forgive me.

** Dependencies
- XPiratez, of course, without whom we wouldn't have the glorious data to explore
  - `xresearch` relies upon a copy of the `Piratez.rul` and `Piratez_lang.rul` files, provided as a part of the XPiratez mod distro. They may have been modified to address YAML parsing issues, only.
- node.js for the ruleset parser and dev server
- `js-yaml` for YAML parsing (the format for the `.rul` file representation)
- `simple-grid.css` for a barebones CSS grid
- `lodash` is great; everyone should use it
- `cytoscape.js` a wonderful and *performant* graph viz library (funded with public money, no less!)
- `redux` for view state management
- `react` as a view engine and structural pattern
- `font-awesome` for icons

** Run development server locally
- have recent node.js + npm installed
- clone this repository to your local machine
- entire repo and run `npm install` command
- `node app.js` to bring up the development server
- Once you see "data is parsed" displayed, you can navigate to `http://localhost:3000` in Chrome to see the app
- You should also install webpack and run it locally within the repo (which includes a `webpack.config.js`) in order to update the `dist/bundle.js` file as you make changes

** Update the Piratez.rul/Piratez_lang.rul files & regenerate static HTML
TODO

** Pending work items [15/25]
- [ ] update to 099H2 ruleset files
- [ ] PARSER: move keysIndexMap into parser from sidebar or whatever
- [ ] colorize Red/Green/Blue as it appears in node list descriptions
- [ ] add checkbox filtering to each node list category in both panes
  - [ ] add detailFilteringCategories: { dependencies, dependedUponBy, unlocks, unlockedBy, getOneFree, giveOneFree }
    - [ ] add SET_DETAIL_FILTERING_CATEGORY action type w/ args of { filteringCategory: 'unlocks', value: true }
    - [ ] add reducer that switches on filteringCategory as will as action.type and sets the key in detailFilteringCategories with whatever is in `value`
  - [ ] on graph draw for selected node display, remove nodes falling into any of the above detailFilteringCategories marked as false
  - [ ] add checkboxes to NodeLinkListComponent (should probably take a memoized function doing an aprop dispatch of SET_DETAIL_FILTERING_CATEGORY); defaulting to true
    - [ ] add onFilteringCheckboxChange to NodeLinkListComponent that gets the toggle and dispatches SET_DETAIL_FILTERING_CATEGORY action w/ the filteringCategory marshalled in props and checkbox checked status as value
  - [ ] changing selectedNodeId (either selecting a node or setting to null as in Show All Topics) should reset detailFilteringCategories to all true
- [ ] increase neighorhood depth from 1 to 2 .. could this be easy? or is it more involved?
- [ ] add manufacturing tasks
  - [ ] modify parser to pull needed stuff from Piratez.rul
  - [ ] show manufacturing requirements on right node list
  - [ ] add filtering?
- [ ] static HTML generation for running as a github site
- [ ] router support in URL
- [ ] show ruleset version in page display
- [ ] extra double-plus gold plating: Create a webfont based upon the XCOM bitmap fontset and use that in xresearch; enforce overall mid-90s DOS euro-game aesthetic
- [ ] PARSER: Integrate "vanilla language files" in common/en-US.yml , standard/xcom1/Language , etc for more str keys
- [X] expand UX to include left/right details pain
  - [X] validate data consistency of xresearch vs in-game tech viewer
  - [X] duplicate nodedetails & map left/right edge displayers:
    - [X] left
      - [X] dependencies
      - [X] unlocked-by
      - [X] get-for-free-from
    - [X] right
      - [X] depended-upon-by
      - [X] unlocks
      - [X] getOneFree (gives one for free, actually?)
  - [X] cytoscape polish
    - [X] show arrows
    - [X] sort out source/target designation
  - [X] the graph takes up a narrower viewport in the center
  - [X] PARSER: map inverses of data in .rul entries (get terminology from tech viewer in client) (should be O(2) ):
    - [X] depended-upon-by, unlocked-by, get-for-free-from
    - [X] PARSER: verify/add base cost and score points
  - [X] graph header
    - [X] a header atop the container div that shows the node of the selected node (or "All Topics" if an individual node isn't selected)
    - [X] base research cost, points shown for selected node
    - [X] "show all topics X" button on r-hand side if node is selected
    - [X] a loading message displayed l-hand side of header that is triggered onNodeSelection and removed on layout.on("stop")
- [X] add node details sidebar view (include <ul>'s with dependencies, unlocks, getOneFree, requires (non-interactive))
  - [X] display dependencies
  - [X] display unlocks
  - [X] display getOneFree
  - [X] display requires
- [X] add Provider component in root of app and strip out manual passing of `store`
- [X] error in displaying The Mutant Alliance
  - [X] some are legit nodes whose string lives in vanilla files (STR_WORKSHOP)
  - [X] some are non-tree events that aren't research topics and probably also have their nodes in vanilla files (STR_ALIEN_TERROR)
- [X] CYTOSCAPE: show sub-graph when NodeDetail is displayed for a given node
  - [X] trim the cytoscape graph display to contain the selected node (bolded/enlarged or whatever), along with its immediate neighbors and the edges that connect them
  - [X] try to use the "cose" layout
- [X] CYTOSCAPE: Clicking on a graph node dispatches NODE_SELECTION action
- [X] fix dark text coloring in page style
- [X] write Piratez/Piratez_lang.rul files parse
- [X] import parsed JSON into a static html display
- [X] Basic, whole-tree display/visualization
- [X] integrate react and refactor to component
- [X] integrate webpack bundling
- [X] node search + sidebar view
  - [X] utilizing the input on the top-right of the page, search the tree topic names for matches
  - [X] display them in a <ul> list on the sidebar
- [X] when "searchText" is empty, return nothing; when > 20 results, return nothing
- [X] Integrate redux for basic view-state management
